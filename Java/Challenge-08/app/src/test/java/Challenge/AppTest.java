/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Challenge;

import Challenge.Queue.QueueDs;
import Challenge.Stack.StackDs;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    StackDs stackDs;
    QueueDs queueDs;

    @Test
    void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @BeforeEach
    void create() {
        stackDs = new StackDs<>();
        queueDs = new QueueDs<>();
    }

    /////// all test in this section for test stack method
    @Test
    void push() {
        stackDs.Push(10);
        assertEquals(10, stackDs.top.value);
        stackDs.Push(20);
        assertEquals(20, stackDs.top.value);
        assertEquals(2, stackDs.size);
    }

    @Test
    void pop() {
        stackDs.Push(10);
        stackDs.Push(20);
        stackDs.Push(30);
        assertEquals(3, stackDs.size);
        int result = (int) stackDs.pop();
        assertEquals(20, stackDs.top.value);
        assertEquals(2, stackDs.size);
        assertEquals(30, result);
    }

    @Test
    void peek() {
        stackDs.Push(10);
        stackDs.Push(20);
        stackDs.Push(30);
        int result = (int) stackDs.peek();
        assertEquals(30, result);
        assertEquals(3, stackDs.size);
    }

    @Test
    void isEmpty() {
        boolean result = stackDs.IsEmpty();
        assertEquals(true, result);
        stackDs.Push("mohammed");
        boolean result2 = stackDs.IsEmpty();
        assertEquals(false, result2);
    }


    /// all test in this section for queue

    @Test
    void enqueue() {
        queueDs.enqueue("mohammed");
        String result = (String) queueDs.rear.value;
        assertEquals("mohammed", result);
        queueDs.enqueue("bara'a");
        assertEquals("bara'a", queueDs.rear.value);
        assertEquals(2, queueDs.size);
    }

    @Test
    void dequeue() {
        queueDs.enqueue("mohammed");
        queueDs.enqueue("bara'a");
        String result = (String) queueDs.dequeue();
        assertEquals("mohammed", result);
        assertEquals(1, queueDs.size);
    }

    @Test
    void peekQ() {
        queueDs.enqueue("mohammed");
        queueDs.enqueue("bara'a");
        String result = (String) queueDs.peek();
        assertEquals("mohammed", result);
        assertEquals(2, queueDs.size);
    }

    @Test
    void isEmptyQ() {
        assertEquals(true, queueDs.IsEmpty());
    }


}
